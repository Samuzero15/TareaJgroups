/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jgroups_again;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author lezama
 */
public class PanelPizarra extends javax.swing.JPanel {

    /**
     * Creates new form PanelPizarra
     */
    private ArrayList<PuntoTinta> puntitos = new ArrayList<>();
    private HashMap<String, Color> colorMarcadorSelect = new HashMap<>();
    private HashMap<String, Color> colorMarcadorCodigo = new HashMap<>();
    private Point p1;
    private Point p2;
    private Color color;
    private int tamano;
    boolean start_draw = false;
    private boolean enpizarra;
    private boolean editable;
    private PizarraProfesor pp;
    public PanelPizarra() {
        this.color = Color.black;
        this.tamano = 5;
        this.editable = true;
        initColores();
        initComponents();
    }
    
    public PanelPizarra(PizarraProfesor pp) {
        this.color = Color.black;
        this.tamano = 20;
        this.editable = true;
        this.pp = pp;
        initColores();
        initComponents();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        
        for (PuntoTinta p : this.puntitos){
            p.draw(g2);
        }
        
        if(this.editable){
            //System.out.println("editable = " + this.editable);
            if(((p1 != null && p2 != null) && (!p1.equals(p2))) || (start_draw)){
                //System.out.println("Nuevo Punto uwu");
                // Cursor
                this.nuevoPunto(new PuntoTinta(p2, this.tamano, this.color));
                for (PuntoTinta p : this.puntitos){
                    p.draw(g2);
                }
                drawCursor(g2,p2, true);
                if(this.pp != null) this.pp.sendStringDibujo(this.puntosAString()); // Pasa el string de dibujos mensajes.

                start_draw = false;
            }else{
                drawCursor(g2,p1, false);
            }
        }
        
        
    }
    
    private void drawCursor(Graphics2D g2,Point p, boolean activar){
        if(p == null) return;
        if(activar){
            g2.setColor(Color.WHITE);
        }else{
            g2.setColor(this.color);
        }
            g2.setStroke(new BasicStroke(1.0f));
            g2.drawOval(p.x - tamano/2, p.y - tamano/2, tamano,tamano);
    }
    
    public void setPP(PizarraProfesor pizarraProfesor){
        this.pp = pizarraProfesor;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        if(p2 != null){
        p2.x = evt.getX();
        p2.y = evt.getY();
        }
        
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        p1 = new Point(evt.getX(), evt.getY());
        p2 = new Point(evt.getX(), evt.getY());
        start_draw = true;
        repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        p2 = null;
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        p1 = new Point(evt.getX(), evt.getY());
        enpizarra = true;
        repaint();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        p1 = null;
        enpizarra = false;
        repaint();
    }//GEN-LAST:event_formMouseExited

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if(enpizarra && p1 != null){
            p1 = new Point(evt.getX(), evt.getY());
            repaint();
        }
    }//GEN-LAST:event_formMouseMoved

    void limpiar() {
        this.puntitos.clear();
        if(this.pp != null) this.pp.sendStringDibujo(this.puntosAString()); // Pasa el string de dibujos mensajes.
        repaint();
    }
    
    public void setColor(Color col){
        this.color = col;
    }
    
    public void setTamano(int tam){
        this.tamano = tam;
    }
    
    public void setEditable(boolean stat){
        this.editable = stat;
    }
    
    public void nuevoPunto(PuntoTinta acm1pt){
        this.puntitos.add(acm1pt);
    }
    
    
    private ArrayList<PuntoTinta> stringAPuntos(String str) {
        ArrayList<PuntoTinta> puntos = new ArrayList<>();
        ArrayList<String> string_puntos = new ArrayList<>();
        
        Pattern pattern = Pattern.compile("\\[(.*?)\\]");
        Matcher matcher = pattern.matcher(str);
        
        while (matcher.find()) {//Finds Matching Pattern in String
            //System.out.println(matcher.group(1));
            string_puntos.add(matcher.group(1));//Fetching Group from String
        }
        
        for (String pts : string_puntos){
            String[] tokens = StringUtils.split(pts,",");
            
            Integer x = new Integer(tokens[0]);
            Integer y = new Integer(tokens[1]);
            Integer tam = new Integer(tokens[3]);
            Color c = this.stringAColor(tokens[2]);
            puntos.add(new PuntoTinta(new Point(x, y),tam, c) );
        }
        return puntos;
    }
    
    public String puntosAString(){
        // Para convertirlos en una linea de mensaje que se pueda enviar en linea
        String linea = "";
        for(PuntoTinta pt : this.puntitos){
            Point pos = pt.getPoint();
            linea = linea + "[" + pos.x + "," + pos.y + "," + this.colorAString(pt.getColor()) + "," + pt.getTamano() + "]";
        }
        return linea;
    }
    
    public void setPuntitos(String str){
        this.puntitos.clear();
        this.puntitos.addAll(stringAPuntos(str));
        repaint();
    }
    
    private String colorAString(Color c){
        for(String k : this.colorMarcadorCodigo.keySet()){
            if(this.colorMarcadorCodigo.get(k).equals(c)){
                return k;
            }
        }
        return "";
    }
    
    private Color stringAColor(String s){
        return this.colorMarcadorCodigo.get(s);
    }

    private void initColores() {
        this.anadirColor("Negro","ne", Color.black);
        this.anadirColor("Blanco","bl", Color.WHITE);
        this.anadirColor("Gris","gr", Color.GRAY);
        this.anadirColor("Azul","az", Color.blue);
        this.anadirColor("Rojo","rj", Color.RED);
        this.anadirColor("Verde","vd", Color.GREEN);
        this.anadirColor("Amarillo","am", Color.YELLOW);
        this.anadirColor("Magneta","ma", Color.MAGENTA);
        this.anadirColor("Cielo","ci", Color.CYAN);
    }
    
    private void anadirColor(String nombre, String letra, Color col){
        this.colorMarcadorSelect.put(nombre, col);
        this.colorMarcadorCodigo.put(letra, col);
    }
    
    public HashMap<String,Color> getListaColoresSelect(){
        return this.colorMarcadorSelect;
    }

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
